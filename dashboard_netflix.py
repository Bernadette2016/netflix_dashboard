# -*- coding: utf-8 -*-
"""Dashboard_Netflix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xmkHRGDI9rEmMgQjr0tBmlxv0mxj2POU
"""
import streamlit as st
import pandas as pd
import altair as alt
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import numpy as np
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# Set up the Streamlit page
st.set_page_config(
    page_title="Netflix Movies and TV Shows",
    page_icon="ðŸŽ¬",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load the dataset
df = pd.read_csv('netflix_titles.csv')
df['date_added'] = pd.to_datetime(df['date_added'], format='mixed', errors='coerce')
df['year_added'] = df['date_added'].dt.year

# Filter data for movies and TV shows
movies = df[df['type'] == 'Movie'].copy()
tv_shows = df[df['type'] == 'TV Show'].copy()

# Sidebar for theme and filters
st.sidebar.title("Netflix Dashboard")
st.sidebar.markdown("---")

# Add theme selection to the sidebar
theme = st.sidebar.selectbox("Select Theme", ["Light", "Dark"])

if theme == "Dark":
    st.markdown("""
    <style>
    .stApp {
        background-color: #1e1e1e;
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)
elif theme == "Light":
    st.markdown("""
    <style>
    .stApp {
        background-color: white;
        color: black;
    }
    </style>
    """, unsafe_allow_html=True)

# Filters
st.sidebar.header("Filters")

# Filter based on Content Type (Movie or TV Show)
content_type_filter = st.sidebar.multiselect(
    'Select Content Type', 
    options=df['type'].unique(), 
    default=df['type'].unique().tolist()  # Default to all types
)

# Filter based on Rating
rating_filter = st.sidebar.multiselect(
    'Select Rating', 
    options=df['rating'].unique(), 
    default=df['rating'].unique().tolist()  # Default to all ratings
)

# Apply the filters to the data
filtered_df = df[df['type'].isin(content_type_filter)]
filtered_df = filtered_df[filtered_df['rating'].isin(rating_filter)]

# Create 2 columns for layout
col1, col2 = st.columns(2)

# Row 1: Distribution of Content Types
with col1:
    type_counts = filtered_df['type'].value_counts()
    fig = px.pie(
        names=type_counts.index, 
        values=type_counts.values, 
        title="Distribution of Content Types"
    )
    st.plotly_chart(fig)

# Row 2: Trend of Movies and TV Shows Added Over Time
with col2:
    content_added_per_year = filtered_df.groupby(['year_added', 'type']).size().unstack(fill_value=0)
    fig = px.line(
        content_added_per_year.reset_index(),
        x='year_added',
        y=content_added_per_year.columns,
        labels={'year_added': 'Year', 'value': 'Number of Content Added'},
        title='Trend of Movies and TV Shows Added Over Time'
    )
    st.plotly_chart(fig)

# Row 3: Distribution of Ratings
with col1:
    st.subheader("Distribution of Ratings")
    plt.figure(figsize=(12, 6))
    sns.countplot(x='rating', data=filtered_df)
    plt.title('Distribution of Ratings')
    plt.xlabel('Rating')
    plt.ylabel('Number of Titles')
    plt.xticks(rotation=45)
    st.pyplot(plt)

# Row 4: Top 10 Genres
with col2:
    genre_counts = filtered_df['listed_in'].str.split(', ', expand=True).stack().value_counts()
    top_genres = genre_counts.head(10)
    
    st.subheader("Top 10 Genres")
    fig = px.bar(
        x=top_genres.index,
        y=top_genres.values,
        labels={'x': 'Genre', 'y': 'Number of Titles'},
        title='Top 10 Genres on Netflix',
    )
    fig.update_xaxes(tickangle=45)
    st.plotly_chart(fig)

# Row 5: Top 10 Directors with Most Titles on Netflix
with col1:
    st.subheader("Top 10 Directors with Most Titles on Netflix")
    plt.figure(figsize=(12, 6))
    sns.countplot(x='director', data=filtered_df, order=filtered_df['director'].value_counts().index[:10], palette='viridis')
    plt.title('Top 10 Directors with Most Titles on Netflix')
    plt.xlabel('Director')
    plt.ylabel('Number of Titles')
    plt.xticks(rotation=45)
    st.pyplot(plt)

# Row 6: Top 10 Countries with Most Titles on Netflix
with col2:
    st.subheader("Top 10 Countries with Most Titles on Netflix")
    plt.figure(figsize=(12, 6))
    sns.countplot(x='country', data=filtered_df, order=filtered_df['country'].value_counts().index[:10], palette='viridis')
    plt.title('Top 10 Countries with Most Titles on Netflix')
    plt.xlabel('Country')
    plt.ylabel('Number of Titles')
    plt.xticks(rotation=45)
    st.pyplot(plt)

# Row 7: Relationship between Release Year and Rating
with col1:
    st.subheader("Relationship between Release Year and Rating")
    fig = plt.figure(figsize=(12, 6))
    sns.boxplot(x='rating', y='release_year', data=filtered_df)
    plt.title('Relationship between Release Year and Rating')
    plt.xlabel('Rating')
    plt.ylabel('Release Year')
    plt.xticks(rotation=45)
    st.pyplot(fig)
