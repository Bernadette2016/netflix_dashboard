# -*- coding: utf-8 -*-
"""Dashboard_Netflix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xmkHRGDI9rEmMgQjr0tBmlxv0mxj2POU
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import numpy as np
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# Set up the Streamlit page
st.set_page_config(
    page_title="Netflix Movies and TV Shows",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Netflix Dashboard Header
st.markdown(
    """
    <style>
    .netflix-header {
        background: linear-gradient(to right, #e50914, #b20710);
        padding: 30px 10px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.4);
        animation: fadeIn 2s ease-in-out;
    }
    .netflix-header h1 {
        color: white;
        font-size: 48px;
        font-weight: 800;
        margin: 0;
        font-family: 'Helvetica Neue', sans-serif;
        letter-spacing: 1px;
    }
    .netflix-subtitle {
        color: #ffffffcc;
        font-size: 20px;
        margin-top: 8px;
        font-family: 'Arial', sans-serif;
    }
    @keyframes fadeIn {
        0% { opacity: 0; transform: translateY(-10px); }
        100% { opacity: 1; transform: translateY(0); }
    }
    </style>

    <div class='netflix-header'>
        <h1>Netflix Data Analysis</h1>
        <div class='netflix-subtitle'>Explore trends, ratings, genres, and more from the Netflix catalog</div>
    </div>
    """,
    unsafe_allow_html=True
)

# Load the dataset
df = pd.read_csv('netflix_titles.csv')
df['date_added'] = pd.to_datetime(df['date_added'], format='mixed', errors='coerce')
df['year_added'] = df['date_added'].dt.year

# Filter data for movies and TV shows
movies = df[df['type'] == 'Movie'].copy()
tv_shows = df[df['type'] == 'TV Show'].copy()

# Sidebar for theme and filters
st.sidebar.markdown("## üéõÔ∏è Filter Your View")
st.sidebar.markdown("---")

# Add theme selection to the sidebar
theme = st.sidebar.selectbox("Select Theme", ["Light", "Dark"])

if theme == "Dark":
    st.markdown("""
    <style>
    .stApp {
        background-color: #1e1e1e;
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)
elif theme == "Light":
    st.markdown("""
    <style>
    .stApp {
        background-color: white;
        color: black;
    }
    </style>
    """, unsafe_allow_html=True)

# Filters
st.sidebar.header("Filters")

# Filter based on Content Type (Movie or TV Show)
content_type_filter = st.sidebar.multiselect(
    'Select Content Type', 
    options=df['type'].unique(), 
    default=df['type'].unique().tolist()
)

# Filter based on Release Year (Slider)
min_year = int(df['release_year'].min())
max_year = int(df['release_year'].max())

release_year_range = st.sidebar.slider(
    'Select Release Year Range',
    min_value=min_year,
    max_value=max_year,
    value=(min_year, max_year)
)

# Apply the filters to the data
filtered_df = df[
    (df['type'].isin(content_type_filter)) &
    (df['release_year'].between(release_year_range[0], release_year_range[1]))
]

# Section: Overview
st.markdown("## üìä Overview")
st.markdown("---")

col1, col2 = st.columns(2)

with col1:
    type_counts = filtered_df['type'].value_counts()
    fig = px.pie(
        names=type_counts.index, 
        values=type_counts.values, 
        title="Distribution of Content Types"
    )
    st.plotly_chart(fig)

with col2:
    content_added_per_year = filtered_df.groupby(['year_added', 'type']).size().unstack(fill_value=0)
    fig = px.line(
        content_added_per_year.reset_index(),
        x='year_added',
        y=content_added_per_year.columns,
        labels={'year_added': 'Year', 'value': 'Number of Content Added'},
        title='Trend of Movies and TV Shows Added Over Time'
    )
    st.plotly_chart(fig)

# Section: Content Insights
st.markdown("## üé¨ Content Insights")
st.markdown("---")

with col1:
    st.subheader("Distribution of Ratings")
    plt.figure(figsize=(12, 6))
    sns.countplot(x='rating', data=filtered_df)
    plt.title('Distribution of Ratings')
    plt.xlabel('Rating')
    plt.ylabel('Number of Titles')
    plt.xticks(rotation=45)
    st.pyplot(plt)

with col2:
    genre_counts = filtered_df['listed_in'].str.split(', ', expand=True).stack().value_counts()
    top_genres = genre_counts.head(10)
    st.subheader("Top 10 Genres")
    fig = px.bar(
        x=top_genres.index,
        y=top_genres.values,
        labels={'x': 'Genre', 'y': 'Number of Titles'},
        title='Top 10 Genres on Netflix',
    )
    fig.update_xaxes(tickangle=45)
    st.plotly_chart(fig)

# Section: Creators and Production
st.markdown("## üé• Creators and Production")
st.markdown("---")

with col1:
    st.subheader("Top 10 Directors with Most Titles on Netflix")
    plt.figure(figsize=(12, 6))
    sns.countplot(x='director', data=filtered_df, order=filtered_df['director'].value_counts().index[:10], palette='viridis')
    plt.title('Top 10 Directors with Most Titles on Netflix')
    plt.xlabel('Director')
    plt.ylabel('Number of Titles')
    plt.xticks(rotation=45)
    st.pyplot(plt)

with col2:
    st.subheader("Top 10 Countries with Most Titles on Netflix")
    plt.figure(figsize=(12, 6))
    sns.countplot(x='country', data=filtered_df, order=filtered_df['country'].value_counts().index[:10], palette='viridis')
    plt.title('Top 10 Countries with Most Titles on Netflix')
    plt.xlabel('Country')
    plt.ylabel('Number of Titles')
    plt.xticks(rotation=45)
    st.pyplot(plt)

# Section: Time-Based Analysis
st.markdown("## üïí Time-Based Analysis")
st.markdown("---")

with col1:
    st.subheader("Relationship between Release Year and Rating")
    fig = plt.figure(figsize=(12, 6))
    sns.boxplot(x='rating', y='release_year', data=filtered_df)
    plt.title('Relationship between Release Year and Rating')
    plt.xlabel('Rating')
    plt.ylabel('Release Year')
    plt.xticks(rotation=45)
    st.pyplot(fig)

with col2:
    st.subheader("Release Year vs Duration (for Movies)")
    movie_data = filtered_df[filtered_df['type'] == 'Movie']
    movie_data['duration'] = movie_data['duration'].str.replace(' min', '').astype(float)
    fig = plt.figure(figsize=(12, 6))
    sns.scatterplot(x='release_year', y='duration', data=movie_data)
    plt.title('Release Year vs Movie Duration')
    plt.xlabel('Release Year')
    plt.ylabel('Duration (minutes)')
    st.pyplot(fig)

# Section: Talent and Popular Titles
st.markdown("## üåü Talent and Popular Titles")
st.markdown("---")

with col1:
    st.subheader("Top 10 Actors/Actresses")
    actor_data = filtered_df['cast'].str.split(', ', expand=True).stack().value_counts().head(10)
    fig = px.bar(
        x=actor_data.index,
        y=actor_data.values,
        labels={'x': 'Actor/Actress', 'y': 'Number of Titles'},
        title='Top 10 Actors/Actresses on Netflix'
    )
    fig.update_xaxes(tickangle=45)
    st.plotly_chart(fig)

with col2:
    st.subheader("Top 10 Most Popular Titles (by Rating)")
    top_rated_titles = filtered_df[['title', 'rating']].dropna().head(10)
    fig = px.bar(
        top_rated_titles,
        x='title',
        y='rating',
        labels={'title': 'Title', 'rating': 'Rating'},
        title='Top 10 Most Popular Titles on Netflix (by Rating)',
    )
    fig.update_xaxes(tickangle=45)
    st.plotly_chart(fig)

# Show completed app layout
st.sidebar.markdown("---")
st.sidebar.markdown("Use the filters to explore the Netflix dataset by content type and release year.")
