# -*- coding: utf-8 -*-
"""Dashboard_Netflix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xmkHRGDI9rEmMgQjr0tBmlxv0mxj2POU
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import numpy as np
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# Set up the Streamlit page
st.set_page_config(
    page_title="Netflix Movies and TV Shows",
    page_icon="ðŸŽ¬",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load the dataset
df = pd.read_csv('netflix_titles.csv')

# Display the first few rows of the dataset to ensure it's loaded correctly
st.write(df.head())

# Convert the 'date_added' column to datetime format and extract the 'year_added' column
df['date_added'] = pd.to_datetime(df['date_added'], format='mixed', errors='coerce')
df['year_added'] = df['date_added'].dt.year

# Filter data for movies and TV shows
movies = df[df['type'] == 'Movie'].copy()
tv_shows = df[df['type'] == 'TV Show'].copy()

# Sidebar for theme and filters
st.sidebar.title("Netflix Dashboard")
st.sidebar.markdown("---")

# Add theme selection to the sidebar
theme = st.sidebar.selectbox("Select Theme", ["Light", "Dark"])

if theme == "Dark":
    st.markdown("""
    <style>
    .stApp {
        background-color: #1e1e1e;
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)
elif theme == "Light":
    st.markdown("""
    <style>
    .stApp {
        background-color: white;
        color: black;
    }
    </style>
    """, unsafe_allow_html=True)

# Filters
st.sidebar.header("Filters")

# Filter based on Content Type (Movie or TV Show)
content_type_filter = st.sidebar.multiselect(
    'Select Content Type', 
    options=df['type'].unique(), 
    default=df['type'].unique().tolist()  # Default to all types
)

# Rating slider
min_rating = df['rating'].astype(str).min()
max_rating = df['rating'].astype(str).max()
rating_filter = st.sidebar.slider(
    'Select Minimum and Maximum Rating Alphabetically',
    min_value=min_rating,
    max_value=max_rating,
    value=(min_rating, max_rating)
)

# Apply the filters to the data
filtered_df = df[df['type'].isin(content_type_filter)]
filtered_df = filtered_df[(filtered_df['rating'] >= rating_filter[0]) & (filtered_df['rating'] <= rating_filter[1])]

# Title and Summary Stats
st.title("ðŸ“Š Netflix Data Analysis")
total_titles = len(filtered_df)
total_movies = len(filtered_df[filtered_df['type'] == 'Movie'])
total_tv_shows = len(filtered_df[filtered_df['type'] == 'TV Show'])

st.markdown(f"### Total Titles: **{total_titles}** | Movies: **{total_movies}** | TV Shows: **{total_tv_shows}**")

# Tabs instead of columns
tabs = st.tabs([
    "Content Type Distribution", 
    "Yearly Trend", 
    "Rating Distribution", 
    "Top Genres",
    "Top Directors", 
    "Top Countries", 
    "Rating vs Year", 
    "Year vs Duration",
    "Genre Rating Distribution", 
    "Common Genres in Movies vs TV Shows"
])

with tabs[0]:
    type_counts = filtered_df['type'].value_counts()
    fig = px.pie(
        names=type_counts.index, 
        values=type_counts.values, 
        title="Distribution of Content Types"
    )
    st.plotly_chart(fig)

with tabs[1]:
    content_added_per_year = filtered_df.groupby(['year_added', 'type']).size().unstack(fill_value=0)
    fig = px.line(
        content_added_per_year.reset_index(),
        x='year_added',
        y=content_added_per_year.columns,
        labels={'year_added': 'Year', 'value': 'Number of Content Added'},
        title='Trend of Movies and TV Shows Added Over Time'
    )
    st.plotly_chart(fig)

with tabs[2]:
    st.subheader("Distribution of Ratings")
    plt.figure(figsize=(12, 6))
    sns.countplot(x='rating', data=filtered_df)
    plt.title('Distribution of Ratings')
    plt.xlabel('Rating')
    plt.ylabel('Number of Titles')
    plt.xticks(rotation=45)
    st.pyplot(plt)

with tabs[3]:
    genre_counts = filtered_df['listed_in'].str.split(', ', expand=True).stack().value_counts()
    top_genres = genre_counts.head(10)
    st.subheader("Top 10 Genres")
    fig = px.bar(
        x=top_genres.index,
        y=top_genres.values,
        labels={'x': 'Genre', 'y': 'Number of Titles'},
        title='Top 10 Genres on Netflix',
    )
    fig.update_xaxes(tickangle=45)
    st.plotly_chart(fig)

with tabs[4]:
    st.subheader("Top 10 Directors with Most Titles on Netflix")
    plt.figure(figsize=(12, 6))
    sns.countplot(x='director', data=filtered_df, order=filtered_df['director'].value_counts().index[:10], palette='viridis')
    plt.title('Top 10 Directors with Most Titles on Netflix')
    plt.xlabel('Director')
    plt.ylabel('Number of Titles')
    plt.xticks(rotation=45)
    st.pyplot(plt)

with tabs[5]:
    st.subheader("Top 10 Countries with Most Titles on Netflix")
    plt.figure(figsize=(12, 6))
    sns.countplot(x='country', data=filtered_df, order=filtered_df['country'].value_counts().index[:10], palette='viridis')
    plt.title('Top 10 Countries with Most Titles on Netflix')
    plt.xlabel('Country')
    plt.ylabel('Number of Titles')
    plt.xticks(rotation=45)
    st.pyplot(plt)

with tabs[6]:
    st.subheader("Relationship between Release Year and Rating")
    fig = plt.figure(figsize=(12, 6))
    sns.boxplot(x='rating', y='release_year', data=filtered_df)
    plt.title('Relationship between Release Year and Rating')
    plt.xlabel('Rating')
    plt.ylabel('Release Year')
    plt.xticks(rotation=45)
    st.pyplot(fig)

with tabs[7]:
    st.subheader("Release Year vs Duration (for Movies)")
    movie_data = filtered_df[filtered_df['type'] == 'Movie']
    movie_data['duration'] = movie_data['duration'].str
